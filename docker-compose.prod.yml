version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-ton_tracker}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ton_tracker_password}
      POSTGRES_DB: ${POSTGRES_DB:-ton_tracker}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ton_tracker}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - internal
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: python run_api.py
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - RELOAD=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - internal
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  bot:
    build:
      context: .
      dockerfile: Dockerfile
    command: python run_bot.py
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_started
    networks:
      - internal
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: python run_worker.py
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_started
    networks:
      - internal
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

volumes:
  postgres_data:
  redis_data:

networks:
  internal:
    driver: bridge

