.PHONY: help install run-api run-bot run-worker run-all dev-up dev-down dev-logs docker-up docker-down docker-logs test lint format clean

help:
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo ""
	@echo "üöÄ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:"
	@echo "  make dev-up       - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ñ–æ–Ω–µ —Å hot reload (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)"
	@echo "  make dev-down     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å dev –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
	@echo "  make dev-logs     - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ dev –æ–∫—Ä—É–∂–µ–Ω–∏—è"
	@echo ""
	@echo "üì¶ –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫:"
	@echo "  make install      - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
	@echo "  make run-api      - –ó–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä"
	@echo "  make run-bot      - –ó–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞"
	@echo "  make run-worker   - –ó–∞–ø—É—Å—Ç–∏—Ç—å background worker"
	@echo "  make run-all      - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ª–æ–∫–∞–ª—å–Ω–æ"
	@echo ""
	@echo "üê≥ Docker (dev):"
	@echo "  make docker-up    - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≤ Docker"
	@echo "  make docker-down  - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
	@echo "  make docker-logs  - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Docker"
	@echo ""
	@echo "üöÄ Production:"
	@echo "  make prod-up      - –ó–∞–ø—É—Å—Ç–∏—Ç—å production –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
	@echo "  make prod-down    - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å production"
	@echo "  make prod-logs    - –ü–æ–∫–∞–∑–∞—Ç—å production –ª–æ–≥–∏"
	@echo "  make prod-restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å production"
	@echo "  make prod-build   - –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å production –æ–±—Ä–∞–∑—ã"
	@echo ""
	@echo "üõ† –£—Ç–∏–ª–∏—Ç—ã:"
	@echo "  make format       - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥"
	@echo "  make clean        - –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"

install:
	pip install -r requirements.txt
	pip install -r requirements-dev.txt

dev-up:
	@echo "üöÄ –ó–∞–ø—É—Å–∫–∞—é dev –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å hot reload..."
	docker-compose -f docker-compose.dev.yml up -d --build
	@echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–µ!"
	@echo "üìù –õ–æ–≥–∏: make dev-logs"
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: make dev-down"

dev-down:
	docker-compose -f docker-compose.dev.yml down

dev-logs:
	docker-compose -f docker-compose.dev.yml logs -f

dev-restart:
	docker-compose -f docker-compose.dev.yml restart

run-api:
	python run_api.py

run-bot:
	python run_bot.py

run-worker:
	python run_worker.py

run-all:
	@echo "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@(trap 'kill 0' SIGINT; \
		python run_api.py & \
		python run_bot.py & \
		python run_worker.py & \
		wait)

docker-up:
	docker-compose up -d

docker-down:
	docker-compose down

docker-logs:
	docker-compose logs -f

docker-rebuild:
	docker-compose up -d --build

format:
	black src/
	isort src/

clean:
	find . -type d -name __pycache__ -exec rm -rf {} +
	find . -type f -name "*.pyc" -delete
	find . -type f -name "*.pyo" -delete
	find . -type f -name "*.log" -delete

db-migrate:
	alembic revision --autogenerate -m "$(msg)"

db-upgrade:
	alembic upgrade head

db-downgrade:
	alembic downgrade -1

prod-up:
	@echo "üöÄ –ó–∞–ø—É—Å–∫–∞—é production –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
	docker-compose -f docker-compose.prod.yml up -d --build
	@echo "‚úÖ Production –∑–∞–ø—É—â–µ–Ω!"
	@echo "üìù –õ–æ–≥–∏: make prod-logs"
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: make prod-down"

prod-down:
	docker-compose -f docker-compose.prod.yml down

prod-logs:
	docker-compose -f docker-compose.prod.yml logs -f

prod-restart:
	docker-compose -f docker-compose.prod.yml restart

prod-build:
	docker-compose -f docker-compose.prod.yml build --no-cache

prod-status:
	docker-compose -f docker-compose.prod.yml ps

